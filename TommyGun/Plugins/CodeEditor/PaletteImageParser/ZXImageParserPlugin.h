/*---------------------------------------------------------------------------

    (c) 2004 Scorpio Software
        19 Wittama Drive
        Glenmore Park
        Sydney NSW 2745
        Australia

-----------------------------------------------------------------------------

    $Workfile::                                                           $
    $Revision::                                                           $
        $Date::                                                           $
      $Author::                                                           $

---------------------------------------------------------------------------*/
//---------------------------------------------------------------------------
#ifndef ZXImageParserPluginH
#define ZXImageParserPluginH
//---------------------------------------------------------------------------
#include "ZXBasePlugin.h"
//---------------------------------------------------------------------------
using namespace Scorpio;
using namespace Plugin;
//using namespace CodeEditor;
//---------------------------------------------------------------------------
// Plugin Class
/**
 * @class   ImageParser class
 * @brief   This class was generated by the KiwiWare Plugin Wizard.
 * @brief   It is the basis for constructing a KiwiWare compatible plugin.
 * @author  KiwiWare Plugin Wizard
 * @date    Created 17 December 2001 by Tony Thompson
 * @remarks Copyright Scorpio Software 2001
 */
//---------------------------------------------------------------------------
class ZXImageParserPlugin : public ZXBasePlugin
{
private:
    enum ConversionMode { cmScanlines, cmCharBlockAttrEnd, cmCharBlockAttrInterleaved   };

    void        __fastcall  GetResourceInfo(const String& sResource, String& sType, String& sName);
    KXmlInfo*   __fastcall  GetResourceNode(KXmlInfo*& XmlData, const String& sType, const String& sName);
    HRESULT     __fastcall  ParseXmlNode(KXmlInfo*& ResNode, TStringList*& Code);

    void        __fastcall  GetFrameData(const String& sPixels, const String& sAttrs, const String& sMasks, const String& sPalette);
    void        __fastcall  ConvertStringToData(unsigned char*& pData, const String& sData, bool bChangeEndianess);
    void        __fastcall  ParseScanlines(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseCharBlockAttrEnd(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseCharBlockAttrInterleaved(int iWidth, int iHeight, TStringList*& Code);
    String      __fastcall  NumToStr(unsigned char iNum);


    unsigned char*          m_pPixels;  // array of pixels used during conversion
    unsigned char*          m_pAttrs;   // array of attributes used during conversion
    unsigned char*          m_pMasks;   // array of mask bits used during conversion
    ConversionMode          m_Mode;     // conversion mode
    bool                    m_PlaceSize;// place the image size
    bool                    m_ConvertX; // convert x to char position
    bool                    m_ConvertY; // convert x to char position

public:
                __fastcall  ZXImageParserPlugin();
                __fastcall ~ZXImageParserPlugin();

    HRESULT     __fastcall  InitialisePlugin    (ZXPlugin* pPlugin);
    HRESULT     __fastcall  ReleasePlugin       (void);
    void        __fastcall  RegisterEvents      (void);

    HRESULT     __fastcall  GetOptionsPanel(TPanel*& Panel);
    HRESULT     __fastcall  GetResourceTypes(KXmlInfo*& XmlData, TStringList*& Types);
    HRESULT     __fastcall  GetResourcesList(KXmlInfo*& XmlData, const String& sType, TStringList*& Resources);
    HRESULT     __fastcall  ParseResources(KXmlInfo*& XmlData, String& Resource, TStringList*& Code, String& ParserData);

    // Events
    //static  HRESULT WINAPI      EventSaveQuery      (ZXEventManager* EventManager, LPDATA lpData, DWORD dwParam, DWORD dwArg);
};
//---------------------------------------------------------------------------
ZXImageParserPlugin* NewPluginClass(void);
//---------------------------------------------------------------------------
#endif
