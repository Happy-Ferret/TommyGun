/*---------------------------------------------------------------------------

    (c) 2004 Scorpio Software
        19 Wittama Drive
        Glenmore Park
        Sydney NSW 2745
        Australia

-----------------------------------------------------------------------------

    $Workfile::                                                           $
    $Revision::                                                           $
        $Date::                                                           $
      $Author::                                                           $

---------------------------------------------------------------------------*/
//---------------------------------------------------------------------------
#ifndef PaletteImageParserPluginH
#define PaletteImageParserPluginH
//---------------------------------------------------------------------------
#include "ZXBasePlugin.h"
//---------------------------------------------------------------------------
using namespace Scorpio;
using namespace Plugin;
//using namespace CodeEditor;
enum eCompiler      { asmGeneric, cGeneric                  };
enum eNumberBase    { nbDecimal, nbHexidecimal, nbBinary    };
//---------------------------------------------------------------------------
// Plugin Class
/**
 * @class   ImageParser class
 * @brief   This class was generated by the KiwiWare Plugin Wizard.
 * @brief   It is the basis for constructing a KiwiWare compatible plugin.
 * @author  KiwiWare Plugin Wizard
 * @date    Created 17 December 2001 by Tony Thompson
 * @remarks Copyright Scorpio Software 2001
 */
//---------------------------------------------------------------------------
class PaletteImageParserPlugin : public ZXBasePlugin
{
private:
    enum TMaskOrder { moNoMask, moPixelMask, moMaskPixel, moBeforePixel, moAfterPixel };
private:
    void        __fastcall  GetResourceInfo(const String& sResource, String& sType, String& sName);
    KXmlInfo*   __fastcall  GetResourceNode(KXmlInfo*& XmlData, const String& sType, const String& sName, String& sPalette);
    HRESULT     __fastcall  ParseXmlNode(KXmlInfo*& ResNode, TStringList*& Code);

    void        __fastcall  GetFrameData(const String& sPixels, const String& sMasks, const String& sPalette, int iWidth);
    void        __fastcall  ConvertStringToData(unsigned char*& pData, const String& sData, int iWidth, bool bInvertByte = false);
    unsigned char __fastcall ConvertToInterleave(unsigned char cp);
    unsigned char __fastcall GetMaskFor(int w, int h, int iWidth);
    void        __fastcall  ParsePixels(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseMasks(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseIntoSourceCode(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseIntoC(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseIntoAsm(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseScanlines(int iWidth, int iHeight, TStringList*& Code);
    String      __fastcall  NumToStr(unsigned char iNum);
    bool        __fastcall  PaletteSupported(const String& sPalette);
    void        __fastcall  SetPaletteParameters(const String& sPalette);

    unsigned char*          m_pPixels;      // array of pixels used during conversion
    unsigned char*          m_pMasks;       // array of mask bits used during conversion
    bool                    m_bMasked;      // flag: image is masked
    bool                    m_MaskInvert;   // flag: mask bytes need to be inverted
    bool                    m_PlaceSize;    // flag: place the image size
    bool                    m_ConvertX;     // flag: convert x to char position
    bool                    m_ConvertY;     // flag: convert x to char position
    bool                    m_WidthHeight;  // flag: use width/height order for size (not height/width)
    bool                    m_Interleaved;  // flag: pixel bits are interleaved
    bool                    m_ZigZagged;    // flag: pixel row order is zig zagged
    bool                    m_UseLabel;     // flag: use an asm label
    int                     m_BitsPerPixel; // number of bits per pixel
    int                     m_iConvertedW;  //
    int                     m_iConvertedH;  // 
    TMaskOrder              m_MaskOrder;    // the order the mask bytes go
    eCompiler               m_Compiler;     // assembler/compiler output to use
    eNumberBase             m_NumberBase;   // the base to output numbers in
    String                  m_BytePrefix;   // the assembler prefix (eg. DB, DEFB, .BYTE etc)
    String                  m_LabelPrefix;  // the assembler label prefix  (eg. . or blank)
    String                  m_LabelPostfix; // the assembler label postfix (eg. blank or :)
    String                  m_CL;           // left comment token
    String                  m_CR;           // right comment token
    String                  m_Name;         // name of the current image + frame

public:
                __fastcall  PaletteImageParserPlugin();
                __fastcall ~PaletteImageParserPlugin();

    HRESULT     __fastcall  InitialisePlugin    (ZXPlugin* pPlugin);
    HRESULT     __fastcall  ReleasePlugin       (void);
    void        __fastcall  RegisterEvents      (void);

    HRESULT     __fastcall  GetOptionsPanel(TPanel*& Panel);
    HRESULT     __fastcall  GetResourceTypes(KXmlInfo*& XmlData, TStringList*& Types);
    HRESULT     __fastcall  GetResourcesList(KXmlInfo*& XmlData, const String& sType, TStringList*& Resources);
    HRESULT     __fastcall  ParseResources(KXmlInfo*& XmlData, String& Resource, TStringList*& Code, String& ParserData);

    // Events
    //static  HRESULT WINAPI      EventSaveQuery      (ZXEventManager* EventManager, LPDATA lpData, DWORD dwParam, DWORD dwArg);
};
//---------------------------------------------------------------------------
PaletteImageParserPlugin* NewPluginClass(void);
//---------------------------------------------------------------------------
#endif
