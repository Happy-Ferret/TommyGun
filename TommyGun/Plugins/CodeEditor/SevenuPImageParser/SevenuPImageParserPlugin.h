/*---------------------------------------------------------------------------

    (c) 2004 Scorpio Software
        19 Wittama Drive
        Glenmore Park
        Sydney NSW 2745
        Australia

-----------------------------------------------------------------------------

    $Workfile::                                                           $
    $Revision::                                                           $
        $Date::                                                           $
      $Author::                                                           $

---------------------------------------------------------------------------*/
//---------------------------------------------------------------------------
#ifndef SevenuPImageParserPluginH
#define SevenuPImageParserPluginH
//---------------------------------------------------------------------------
#include "ZXBasePlugin.h"
//---------------------------------------------------------------------------
using namespace Scorpio;
using namespace Plugin;
//using namespace CodeEditor;
enum eDataOutputted { doGraphicsAttributes, doAttributesGraphics, doGraphics, doAttributes  };
enum eCompiler      { asmGeneric, cGeneric                                                  };
enum eInterleave    { iLine, iCharacter, iColumn, iFrames, iSprite                          };
enum eNumberBase    { nbDecimal, nbHexidecimal, nbBinary, nbOctal                           };
enum eAttributes    { abInk = 0x07, abPaper = 0x38, abBright = 0x40, abFlash = 0x80         };
enum eSortOrder     { soXChar, soCharLine, soYChar, soMask, soFrameNumber                   };
//---------------------------------------------------------------------------
// Plugin Class
/**
 * @class   ImageParser class
 * @brief   This class was generated by the KiwiWare Plugin Wizard.
 * @brief   It is the basis for constructing a KiwiWare compatible plugin.
 * @author  KiwiWare Plugin Wizard
 * @date    Created 17 December 2001 by Tony Thompson
 * @remarks Copyright Scorpio Software 2001
 */
//---------------------------------------------------------------------------
class SevenuPImageParserPlugin : public ZXBasePlugin
{
private:

    void        __fastcall  GetResourceInfo(const String& sResource, String& sType, String& sName);
    KXmlInfo*   __fastcall  GetResourceNode(KXmlInfo*& XmlData, const String& sType, const String& sName);
    HRESULT     __fastcall  ParseXmlNode(KXmlInfo*& ResNode, TStringList*& Code);
    void        __fastcall  ParseSevenuPData(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseIntoC(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  ParseIntoAsm(int iWidth, int iHeight, TStringList*& Code);
    void        __fastcall  OutputGraphics(int iWidth, int iHeight, TStringList*& Code, bool bLastComma = false);
    void        __fastcall  OutputAttributes(int iWidth, int iHeight, TStringList*& Code, bool bLastComma = false);

    void        __fastcall  GetFrameData(int index, const String& sPixels, const String& sAttrs, const String& sMasks, const String& sPalette, int iWidth);
    void        __fastcall  ConvertStringToData(unsigned char*& pData, const String& sData, int iWidth, bool bInvertByte = false);
    String      __fastcall  NumToStr(unsigned char iNum);
    bool        __fastcall  PaletteSupported(const String& sPalette);

    unsigned char*          m_pPixels[256];     // array of pixels used during conversion
    unsigned char*          m_pAttrs[256];      // array of attributes used during conversion
    unsigned char*          m_pMasks[256];      // array of mask bits used during conversion
    eDataOutputted          m_DataOutputted;    // data output mode
    eCompiler               m_Compiler;         // assembler/compiler output to use
    eInterleave             m_Interleave;       // the interleave type
    eNumberBase             m_NumberBase;       // the base to output numbers in
    unsigned char           m_AttributeMaskBits;// the mask bits of the attributes
    bool                    m_AttributeMask;    // flag: attributes have a mask
    bool                    m_MaskBefore;       // flag: mask bytes go before the pixels
    bool                    m_MaskInvert;       // flag: indicates that the covers the image and needs to be inverted
    bool                    m_UseLabel;         // flag: use an asm label
    bool                    m_ZigZagged;        // flag: indicates we go back and forth
    bool                    m_AddZ88DK;         // flag: add the Z88DK information
    bool                    m_IsMasked;         // flag: is masked
    eSortOrder              m_SortOrder[5];     // byte sort order
    String                  m_sName;            // the name of the image
    int                     m_Frames;           // the number of frames in the image
    String                  m_BytePrefix;       // the assembler prefix (eg. DB, DEFB, .BYTE etc)
    String                  m_LabelPrefix;      // the assembler label prefix  (eg. . or blank)
    String                  m_LabelPostfix;     // the assembler label postfix (eg. blank or :)

public:
                __fastcall  SevenuPImageParserPlugin();
                __fastcall ~SevenuPImageParserPlugin();

    HRESULT     __fastcall  InitialisePlugin    (ZXPlugin* pPlugin);
    HRESULT     __fastcall  ReleasePlugin       (void);
    void        __fastcall  RegisterEvents      (void);

    HRESULT     __fastcall  GetOptionsPanel(TPanel*& Panel);
    HRESULT     __fastcall  GetResourceTypes(KXmlInfo*& XmlData, TStringList*& Types);
    HRESULT     __fastcall  GetResourcesList(KXmlInfo*& XmlData, const String& sType, TStringList*& Resources);
    HRESULT     __fastcall  ParseResources(KXmlInfo*& XmlData, String& Resource, TStringList*& Code, String& ParserData);

    // Events
    //static  HRESULT WINAPI      EventSaveQuery      (ZXEventManager* EventManager, LPDATA lpData, DWORD dwParam, DWORD dwArg);
};
//---------------------------------------------------------------------------
SevenuPImageParserPlugin* NewPluginClass(void);
//---------------------------------------------------------------------------
#endif
