/*---------------------------------------------------------------------------

    (c) 2004 Scorpio Software
        19 Wittama Drive
        Glenmore Park
        Sydney NSW 2745
        Australia

-----------------------------------------------------------------------------

    $Workfile::                                                           $
    $Revision::                                                           $
        $Date::                                                           $
      $Author::                                                           $

---------------------------------------------------------------------------*/
//---------------------------------------------------------------------------
#ifndef PaletteParserPluginH
#define PaletteParserPluginH
//---------------------------------------------------------------------------
#include "ZXBasePlugin.h"
//---------------------------------------------------------------------------
using namespace Scorpio;
using namespace Plugin;
//using namespace CodeEditor;
enum eCompiler      { asmGeneric, cGeneric                  };
enum eNumberBase    { nbDecimal, nbHexidecimal, nbBinary    };
//---------------------------------------------------------------------------
// Plugin Class
/**
 * @class   PaletteParser class
 * @brief   This class was generated by the KiwiWare Plugin Wizard.
 * @brief   It is the basis for constructing a KiwiWare compatible plugin.
 * @author  KiwiWare Plugin Wizard
 * @date    Created 17 December 2001 by Tony Thompson
 * @remarks Copyright Scorpio Software 2001
 */
//---------------------------------------------------------------------------
class PaletteParserPlugin : public ZXBasePlugin
{
private:
    void        __fastcall  GetResourceInfo(const String& sResource, String& sType, String& sName);
    KXmlInfo*   __fastcall  GetResourceNode(KXmlInfo*& XmlData, const String& sType, const String& sName);
    HRESULT     __fastcall  ParseXmlNode(KXmlInfo*& ResNode, TStringList*& Code);

    void        __fastcall  GetPaletteData(const String& sPaletteData, const String& sPalette);
    void        __fastcall  ConvertStringToData(unsigned char*& pData, const String& sData, int iWidth, bool bInvertByte = false);
    void        __fastcall  ParseIntoSourceCode(int iSize, TStringList*& Code);
    void        __fastcall  ParseIntoC(int iSize, TStringList*& Code);
    void        __fastcall  ParseIntoAsm(int iSize, TStringList*& Code);
    void        __fastcall  ParsePalette(int iSize, TStringList*& Code);
    String      __fastcall  NumToStr(unsigned char iNum);
    bool        __fastcall  PaletteSupported(const String& sPalette);

    bool                    m_UseLabel;     // flag: use an asm label
    eCompiler               m_Compiler;     // assembler/compiler output to use
    eNumberBase             m_NumberBase;   // the base to output numbers in
    String                  m_BytePrefix;   // the assembler prefix (eg. DB, DEFB, .BYTE etc)
    String                  m_LabelPrefix;  // the assembler label prefix  (eg. . or blank)
    String                  m_LabelPostfix; // the assembler label postfix (eg. blank or :)
    String                  m_CL;           // left comment token
    String                  m_CR;           // right comment token
    String                  m_Name;         // name of the current image + frame
    int*                    m_pPalette;     // the palette values

public:
                __fastcall  PaletteParserPlugin();
                __fastcall ~PaletteParserPlugin();

    HRESULT     __fastcall  InitialisePlugin    (ZXPlugin* pPlugin);
    HRESULT     __fastcall  ReleasePlugin       (void);
    void        __fastcall  RegisterEvents      (void);

    HRESULT     __fastcall  GetOptionsPanel(TPanel*& Panel);
    HRESULT     __fastcall  GetResourceTypes(KXmlInfo*& XmlData, TStringList*& Types);
    HRESULT     __fastcall  GetResourcesList(KXmlInfo*& XmlData, const String& sType, TStringList*& Resources);
    HRESULT     __fastcall  ParseResources(KXmlInfo*& XmlData, String& Resource, TStringList*& Code, String& ParserData);

    // Events
    //static  HRESULT WINAPI      EventSaveQuery      (ZXEventManager* EventManager, LPDATA lpData, DWORD dwParam, DWORD dwArg);
};
//---------------------------------------------------------------------------
PaletteParserPlugin* NewPluginClass(void);
//---------------------------------------------------------------------------
#endif
