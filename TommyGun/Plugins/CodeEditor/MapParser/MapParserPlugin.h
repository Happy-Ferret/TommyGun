/*---------------------------------------------------------------------------

    (c) 2004 Scorpio Software
        19 Wittama Drive
        Glenmore Park
        Sydney NSW 2745
        Australia

-----------------------------------------------------------------------------

    $Workfile::                                                           $
    $Revision::                                                           $
        $Date::                                                           $
      $Author::                                                           $

---------------------------------------------------------------------------*/
//---------------------------------------------------------------------------
#ifndef MapParserPluginH
#define MapParserPluginH
//---------------------------------------------------------------------------
#include <map>
#include "ZXBasePlugin.h"
//---------------------------------------------------------------------------
using namespace Scorpio;
using namespace Plugin;
//using namespace CodeEditor;
enum eNumberBase    { nbDecimal, nbHexidecimal, nbBinary, nbOctal, nbDefault };
//---------------------------------------------------------------------------
// Plugin Class
/**
 * @class   MapParser class
 * @brief   This class was generated by the KiwiWare Plugin Wizard.
 * @brief   It is the basis for constructing a KiwiWare compatible plugin.
 * @author  KiwiWare Plugin Wizard
 * @date    Created 17 December 2001 by Tony Thompson
 * @remarks Copyright Scorpio Software 2001
 */
//---------------------------------------------------------------------------
class MapParserPlugin : public ZXBasePlugin
{
private:
    typedef std::map<String, int>   TTileMap;

    TTileMap                m_TilesMap;
    std::vector<String>     m_sTiles;

private:
    void        __fastcall  BuildTilesMap(KXmlInfo*& XmlData);
    HRESULT     __fastcall  ParseMap(KXmlInfo*& XmlData, TStringList*& Code);
    String      __fastcall  NumToStr(unsigned char iNum, eNumberBase NumberBase = nbDefault, char Filler = ' ');
    void        __fastcall  GetScreenProperties(KXmlInfo*& XmlData);
    void        __fastcall  ParseScreenWithCoords(KXmlInfo*& XmlData, TStringList*& Code);
    void        __fastcall  ParseScreenOnlyIndexes(KXmlInfo*& XmlData, TStringList*& Code);
    int         __fastcall  GetTileIndex(const String& sName);
    void        __fastcall  BufferAdd(unsigned char Data, unsigned char* pBuffer, int& Pos);
    void        __fastcall  BufferAdd(int Data, unsigned char* pBuffer, int& Pos);
    int         __fastcall  FileSize(const String& sFile);
    void        __fastcall  DoPostProcess(unsigned char* pBuffer, int Size, TStringList*& NewCode);
    void        __fastcall  DeleteBinFiles();


    std::vector<String>     m_MapTable;         // list of screens that make up the map table
    int                     m_iWidth;           // width of each screen
    int                     m_iHeight;          // height of each screen
    int                     m_iAcross;          // number of screens across
    int                     m_iDown;            // number of screens down
    String                  m_sMapName;         // map table name
    String                  m_sPrefix;          // screen prefix name
    bool                    m_MapSortColRow;    // sort the map col/row        
    bool                    m_ConvertX;         // convert x co-ord to char
    bool                    m_ConvertY;         // convert y co-ord to char
    bool                    m_IndexOnly;        // map is index only (no co-ords)
    bool                    m_BuildTilesTable;  // builds the tile info table
    bool                    m_UseDefwCoords;    // use defw for co-ordinates
    bool                    m_UseDefwIndexes;   // use defw for indexes
    bool                    m_UsePostProcessor; // use an external application
    bool                    m_ConvertToSource;  // convert post-process file to source code
    bool                    m_LittleEndian;     // integers are stored in little endian (Z80 default)
    String                  m_Application;      // the post-process application to run
    String                  m_Parameters;       // the parameters for the application
    eNumberBase             m_NumberBase;       // the base to output numbers in
    int                     m_GridWidth;        // the width of tile spacing
    int                     m_GridHeight;       // the height of the tile spacing
    int                     m_ScreenIndex;      // the current screen index (post processing)

public:
                __fastcall  MapParserPlugin();
                __fastcall ~MapParserPlugin();

    HRESULT     __fastcall  InitialisePlugin    (ZXPlugin* pPlugin);
    HRESULT     __fastcall  ReleasePlugin       (void);
    void        __fastcall  RegisterEvents      (void);

    HRESULT     __fastcall  GetOptionsPanel(TPanel*& Panel);
    HRESULT     __fastcall  GetResourceTypes(KXmlInfo*& XmlData, TStringList*& Types);
    HRESULT     __fastcall  GetResourcesList(KXmlInfo*& XmlData, const String& sType, TStringList*& Resources);
    HRESULT     __fastcall  ParseResources(KXmlInfo*& XmlData, String& Resource, TStringList*& Code, String& ParserData);

    // Events
    //static  HRESULT WINAPI      EventSaveQuery      (ZXEventManager* EventManager, LPDATA lpData, DWORD dwParam, DWORD dwArg);
};
//---------------------------------------------------------------------------
MapParserPlugin* NewPluginClass(void);
//---------------------------------------------------------------------------
#endif
